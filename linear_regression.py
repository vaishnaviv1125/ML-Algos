# -*- coding: utf-8 -*-
"""linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gdXhFIpnq5-NrwTJUYu3wUAg2EHQ61r3
"""

#LINEAR REGRESSION

import pandas as pd
import matplotlib.pyplot as plt
import  seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

car_data=pd.read_csv("/content/car_data.csv")

car_data.head()     ##displays the 1st 5 rows of the dataset

car_data.shape    ##displays the total no of rows n columns in the dataset

car_data.info()

car_data.isnull().sum()

##cals the sum of missing values for each column

print("Fuel_Type")
print(car_data.Fuel_Type.value_counts())
print("Seller_Type")
print(car_data.Seller_Type.value_counts())
print("Transmission")
print(car_data.Transmission.value_counts())

##counts the unique values for the 3 variables

car_data.replace({ "Fuel_Type":{"Petrol":0,"Diesel":1,"CNG":2}},inplace=True)
car_data.replace({ "Seller_Type":{"Dealer":0,"Individual":1}},inplace=True)
car_data.replace({ "Transmission":{"Manual":0,"Automatic":1}},inplace=True)

car_data.head()

X = car_data.drop(["Car_Name", "Selling_Price"], axis = 1)
Y = car_data["Selling_Price"]
print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=2)
print(X_train)
print(Y_test)

model=LinearRegression()

model.fit(X_train,Y_train)

model=LinearRegression()        #to predict the numerical value by finding thee relationship b/w the input and the output values
model.fit(X_train,Y_train)

train_prediction=model.predict(X_train)
error_score=metrics.r2_score(Y_train,train_prediction)
print("R squared error : ",error_score)                   #How well the model has learned the training data.
                                                          #High R² here means the model fits the data it was trained on.

plt.scatter(Y_train, train_prediction)                    #plotting of graph
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price on training data")
plt.show()

test_prediction=model.predict(X_test)
test_error_score=metrics.r2_score(Y_test,test_prediction)
print("R squared error : ",test_error_score)            #How well the model performs on unseen (new) data.
                                                        #High R² here means the model generalizes well.

plt.scatter(Y_test, test_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price on test data")
plt.show()



model = Lasso()               ##shrinks some coefficients to zero by removing the irrelevant features.this can be used for feature selection and when there are more sample to avoid overfitting
model.fit(X_train, Y_train)

training_prediction = model.predict(X_train)
training_error_score = metrics.r2_score(Y_train, training_prediction) #how well the model has learned the training data
print(training_error_score)


plt.scatter(Y_train, training_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price on training data")
plt.show()

test_prediction = model.predict(X_test)
test_error_score = metrics.r2_score(Y_test, test_prediction)  #how well the model performs on unseen data
print(test_error_score)


plt.scatter(Y_test, test_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted Price on training data")
plt.show()

!pip install gradio

import numpy as np
import gradio as gr
from sklearn import metrics

# Assuming `model` is your trained car price prediction model
# Assuming you have your test data (Y_test and test_prediction)

def predict_car_price(year, present_price, kms_driven, fuel_type, seller_type, transmission, owner):
    try:
        # Ensure inputs are not None and convert to appropriate numeric format
        if year is None or present_price is None or kms_driven is None or fuel_type is None or seller_type is None or transmission is None or owner is None:
            return "Please fill in all fields."

        # Convert inputs to appropriate numeric format
        year = int(year)               # Convert year to integer
        present_price = float(present_price)  # Convert present price to float
        kms_driven = float(kms_driven) # Convert Kms_Driven to float
        fuel_type = int(fuel_type)     # Convert fuel type to integer
        seller_type = int(seller_type) # Convert seller type to integer
        transmission = int(transmission) # Convert transmission to integer
        owner = int(owner)             # Convert owner to integer

        # Create input data array with all 7 features
        input_data = np.array([year, present_price, kms_driven, fuel_type, seller_type, transmission, owner])

        # Reshape for a single prediction
        input_data_reshaped = input_data.reshape(1, -1)

        # Make prediction using the loaded model
        prediction = model.predict(input_data_reshaped)

        # Calculate R2 score on test data (assumes Y_test and test_prediction are available)
        test_error_score = metrics.r2_score(Y_test, test_prediction)

        return f"Predicted Price: {prediction[0]:.2f}\nTest R2 Score: {test_error_score:.2f}"
    except Exception as e:
        return str(e)

# Define Gradio interface
demo = gr.Interface(
    fn=predict_car_price,
    inputs=[
        gr.Number(label="Year"),
        gr.Number(label="Present Price"),
        gr.Number(label="Kms Driven"),
        gr.Dropdown(choices=["0", "1"], label="Fuel Type (0 = Gas, 1 = Diesel)"),
        gr.Dropdown(choices=["0", "1"], label="Seller Type (0 = Dealer, 1 = Individual)"),
        gr.Dropdown(choices=["0", "1"], label="Transmission (0 = Manual, 1 = Automatic)"),
        gr.Number(label="Owner")
    ],
    outputs="text",
    title="Car Price Prediction",
    description="Enter the values to predict the car price and view the test error score."
)

# Run on localhost
demo.launch()

